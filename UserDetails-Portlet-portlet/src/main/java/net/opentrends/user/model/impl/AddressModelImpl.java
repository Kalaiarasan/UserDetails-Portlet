package net.opentrends.user.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.user.model.Address;
import net.opentrends.user.model.AddressModel;
import net.opentrends.user.model.AddressSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Address service. Represents a row in the &quot;portal_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.user.model.AddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressImpl}.
 * </p>
 *
 * @author Ravi
 * @see AddressImpl
 * @see net.opentrends.user.model.Address
 * @see net.opentrends.user.model.AddressModel
 * @generated
 */
@JSON(strict = true)
public class AddressModelImpl extends BaseModelImpl<Address>
    implements AddressModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a address model instance should use the {@link net.opentrends.user.model.Address} interface instead.
     */
    public static final String TABLE_NAME = "portal_Address";
    public static final Object[][] TABLE_COLUMNS = {
            { "addressId", Types.BIGINT },
            { "personId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "street1", Types.VARCHAR },
            { "street2", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "country", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table portal_Address (addressId LONG not null primary key,personId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,street1 VARCHAR(75) null,street2 VARCHAR(75) null,city VARCHAR(75) null,country VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table portal_Address";
    public static final String ORDER_BY_JPQL = " ORDER BY address.addressId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY portal_Address.addressId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.user.model.Address"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.user.model.Address"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.user.model.Address"));
    private static ClassLoader _classLoader = Address.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Address.class
        };
    private long _addressId;
    private long _personId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _street1;
    private String _street2;
    private String _city;
    private String _country;
    private Address _escapedModel;

    public AddressModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Address toModel(AddressSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Address model = new AddressImpl();

        model.setAddressId(soapModel.getAddressId());
        model.setPersonId(soapModel.getPersonId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStreet1(soapModel.getStreet1());
        model.setStreet2(soapModel.getStreet2());
        model.setCity(soapModel.getCity());
        model.setCountry(soapModel.getCountry());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Address> toModels(AddressSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Address> models = new ArrayList<Address>(soapModels.length);

        for (AddressSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _addressId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAddressId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _addressId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Address.class;
    }

    @Override
    public String getModelClassName() {
        return Address.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("addressId", getAddressId());
        attributes.put("personId", getPersonId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("street1", getStreet1());
        attributes.put("street2", getStreet2());
        attributes.put("city", getCity());
        attributes.put("country", getCountry());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long addressId = (Long) attributes.get("addressId");

        if (addressId != null) {
            setAddressId(addressId);
        }

        Long personId = (Long) attributes.get("personId");

        if (personId != null) {
            setPersonId(personId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String street1 = (String) attributes.get("street1");

        if (street1 != null) {
            setStreet1(street1);
        }

        String street2 = (String) attributes.get("street2");

        if (street2 != null) {
            setStreet2(street2);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }
    }

    @JSON
    @Override
    public long getAddressId() {
        return _addressId;
    }

    @Override
    public void setAddressId(long addressId) {
        _addressId = addressId;
    }

    @JSON
    @Override
    public long getPersonId() {
        return _personId;
    }

    @Override
    public void setPersonId(long personId) {
        _personId = personId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getStreet1() {
        if (_street1 == null) {
            return StringPool.BLANK;
        } else {
            return _street1;
        }
    }

    @Override
    public void setStreet1(String street1) {
        _street1 = street1;
    }

    @JSON
    @Override
    public String getStreet2() {
        if (_street2 == null) {
            return StringPool.BLANK;
        } else {
            return _street2;
        }
    }

    @Override
    public void setStreet2(String street2) {
        _street2 = street2;
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _city = city;
    }

    @JSON
    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Address.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Address toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Address) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AddressImpl addressImpl = new AddressImpl();

        addressImpl.setAddressId(getAddressId());
        addressImpl.setPersonId(getPersonId());
        addressImpl.setGroupId(getGroupId());
        addressImpl.setCompanyId(getCompanyId());
        addressImpl.setUserId(getUserId());
        addressImpl.setUserName(getUserName());
        addressImpl.setCreateDate(getCreateDate());
        addressImpl.setModifiedDate(getModifiedDate());
        addressImpl.setStreet1(getStreet1());
        addressImpl.setStreet2(getStreet2());
        addressImpl.setCity(getCity());
        addressImpl.setCountry(getCountry());

        addressImpl.resetOriginalValues();

        return addressImpl;
    }

    @Override
    public int compareTo(Address address) {
        long primaryKey = address.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Address)) {
            return false;
        }

        Address address = (Address) obj;

        long primaryKey = address.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Address> toCacheModel() {
        AddressCacheModel addressCacheModel = new AddressCacheModel();

        addressCacheModel.addressId = getAddressId();

        addressCacheModel.personId = getPersonId();

        addressCacheModel.groupId = getGroupId();

        addressCacheModel.companyId = getCompanyId();

        addressCacheModel.userId = getUserId();

        addressCacheModel.userName = getUserName();

        String userName = addressCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            addressCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            addressCacheModel.createDate = createDate.getTime();
        } else {
            addressCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            addressCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            addressCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        addressCacheModel.street1 = getStreet1();

        String street1 = addressCacheModel.street1;

        if ((street1 != null) && (street1.length() == 0)) {
            addressCacheModel.street1 = null;
        }

        addressCacheModel.street2 = getStreet2();

        String street2 = addressCacheModel.street2;

        if ((street2 != null) && (street2.length() == 0)) {
            addressCacheModel.street2 = null;
        }

        addressCacheModel.city = getCity();

        String city = addressCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            addressCacheModel.city = null;
        }

        addressCacheModel.country = getCountry();

        String country = addressCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            addressCacheModel.country = null;
        }

        return addressCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{addressId=");
        sb.append(getAddressId());
        sb.append(", personId=");
        sb.append(getPersonId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", street1=");
        sb.append(getStreet1());
        sb.append(", street2=");
        sb.append(getStreet2());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.user.model.Address");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>addressId</column-name><column-value><![CDATA[");
        sb.append(getAddressId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>personId</column-name><column-value><![CDATA[");
        sb.append(getPersonId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>street1</column-name><column-value><![CDATA[");
        sb.append(getStreet1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>street2</column-name><column-value><![CDATA[");
        sb.append(getStreet2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
